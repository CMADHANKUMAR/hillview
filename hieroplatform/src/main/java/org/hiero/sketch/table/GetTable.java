package org.hiero.sketch.table;

import org.hiero.sketch.dataset.LocalDataSet;
import org.hiero.sketch.dataset.ParallelDataSet;
import org.hiero.sketch.dataset.api.IDataSet;
import org.hiero.sketch.table.api.ContentsKind;
import org.hiero.sketch.table.api.IColumn;
import org.hiero.sketch.table.api.IMembershipSet;
import org.hiero.sketch.table.api.ITable;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class GetTable {
    /**
     * Can be used for testing.
     * @return A small table with some interesting contents.
     */
    public static Table testTable() {
        ColumnDescription c0 = new ColumnDescription("Name", ContentsKind.Category, false);
        ColumnDescription c1 = new ColumnDescription("Age", ContentsKind.Integer, false);
        StringArrayColumn sac = new StringArrayColumn(c0,
                new String[] { "Mike", "John", "Tom", "Bill", "Bill", "Smith", "Donald", "Bruce",
                               "Bob", "Frank", "Richard", "Steve", "Dave" });
        IntArrayColumn iac = new IntArrayColumn(c1, new int[] { 20, 30, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 });
        return new Table(Arrays.asList(sac, iac));
    }

    /**
     * Can be used for testing.
     * @return A small table with some repeated content.
     */
    public static Table testRepTable() {
        ColumnDescription c0 = new ColumnDescription("Name", ContentsKind.Category, false);
        ColumnDescription c1 = new ColumnDescription("Age", ContentsKind.Integer, false);
        StringArrayColumn sac = new StringArrayColumn(c0,
                new String[] { "Mike", "John", "Tom", "Bill", "Bill", "Smith", "Donald", "Bruce",
                        "Bob", "Frank", "Richard", "Steve", "Dave", "Mike", "Ed" });
        IntArrayColumn iac = new IntArrayColumn(c1, new int[] { 20, 30, 10, 10, 20, 30, 20, 30, 10,
                40, 40, 20, 10, 50, 60 });
        return new Table(Arrays.asList(sac, iac));
    }

    public static Table getRepIntTable(final int size, final int numCols) {
        final List<IColumn> columns = new ArrayList<IColumn>(numCols);
        double exp = 0.75/numCols;
        final int range =  ((int)Math.pow(size, exp));
        for (int i = 0; i < numCols; i++) {
            final String colName = "Column" + String.valueOf(i);
            columns.add(GetIntArray.getRandIntArray(size, range, colName));
        }
        final FullMembership full = new FullMembership(size);
        return new Table(columns, full);
    }

    public static List<ITable> splitTable(ITable bigTable, int fragmentSize) {
        int tableSize = bigTable.getNumOfRows();
        int numTables = (tableSize / fragmentSize) + 1;
        List<ITable> tableList = new ArrayList<ITable>(numTables);
        int start = 0;
        while (start < tableSize) {
            int thisFragSize = Math.min(fragmentSize, tableSize - start);
            IMembershipSet members = new SparseMembership(start, thisFragSize);
            tableList.add(bigTable.selectRowsFromFullTable(members));
            start += fragmentSize;
        }
        return tableList;
    }

    public static ParallelDataSet<ITable> makeParallel(ITable bigTable, int fragmentSize) {
        final List<ITable> tabList = splitTable(bigTable, fragmentSize);
        final ArrayList<IDataSet<ITable>> a = new ArrayList<IDataSet<ITable>>();
        for (ITable t : tabList) {
            LocalDataSet<ITable> ds = new LocalDataSet<ITable>(t);
            a.add(ds);
        }
        return new ParallelDataSet<ITable>(a);
    }

    public static SmallTable getIntTable(final int size, final int numCols) {
        final List<IColumn> columns = new ArrayList<IColumn>(numCols);
        double exp = 1.0/numCols;
        final int range =  5*((int)Math.pow(size, exp));
        for (int i = 0; i < numCols; i++) {
            final String colName = "Column" + String.valueOf(i);
            columns.add(GetIntArray.getRandIntArray(size, range, colName));
        }
        return new SmallTable(columns);
    }

    /**
     * Method generates a table with a specified number of integer columns, where each column is
     * generated by the GetHeavyIntTable Method so the frequencies are geometrically increasing
     * @param numCols number of columns
     * @param size size per column
     * @param base base parameter for GetHeavyIntTable
     * @param range range parameter for GetHeavyIntTable
     * @return A table.
     */
    public static SmallTable getHeavyIntTable(final int numCols, final int size, final double base,
                                         final int range) {
        final List<IColumn> columns = new ArrayList<IColumn>(numCols);
        for (int i = 0; i < numCols; i++) {
            final String colName = "Column" + String.valueOf(i);
            columns.add(GetIntArray.getHeavyIntArray(size, base, range, colName));
        }
        return new SmallTable(columns);
    }
}
